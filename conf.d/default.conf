
server {
    listen       80;
    server_name  _;

    gzip on;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_buffers 4 8k;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json;

    access_log  /var/log/nginx/access.log main;

    location / {
        root   /@app;
        index  index.html index.htm;
    }

    location ^~/@app/ {
    	root /;
    	internal;
    }

    location ^~/@http/ {
        internal;
        rewrite ^/@http/([^/]+)/(\d+)/(.*)  /$3 break;
        resolver 8.8.8.8;
        proxy_set_header Host $1:$2;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass      http://$1:$2;
        client_max_body_size    1000m;
    }

    location ^~/@https/ {
        internal;
        rewrite ^/@https/([^/]+)/(\d+)/(.*)  /$3 break;
        resolver 8.8.8.8;
        proxy_set_header Host $1:$2;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass      https://$1:$2;
        client_max_body_size    1000m;
    }

    location ^~/static/ {
        root /;
        index  index.html index.htm;
    }

 	location ~ \.html$ {
        # MIME type determined by default_type:
        default_type 'text/html';

        content_by_lua_block {

        	local string = require("string");
        	local path = string.gsub(string.gsub(ngx.var.request_uri,"%?.*",""),"%#.*","");
        	local i,_ = string.find(path,".view.html$");

            if i == nil then
                i,_ = string.find(path,".html$");

            	if i == nil then
                    i,_ = string.find(path,"/$");
                    if i ~= nil then
            		  path = path .. "index.html";
                    else
                      path = path .. "/index.html";
                    end
            	end
            	local rs = ngx.location.capture("/@app" .. path);
            	if(rs.status == 200) then
            		ngx.say(kk.page({},rs.body));
            	else
            		ngx.exit(rs.status);
            	end
            else
                ngx.exit(404);
            end

        }
    }

    location ~ \.json$ {
        # MIME type determined by default_type:
        default_type 'application/json';

        content_by_lua_block {
            local string = require("string");
            local path = string.gsub(string.gsub(ngx.var.request_uri,"%?.*",""),"%#.*","");
            local i,_ = string.find(path,"/$");
            if i~= nil then
                path = path .. "index.json";
            end
            local rs = ngx.location.capture("/@app" .. path);
            if(rs.status == 200) then
                ngx.header.content_type="application/json; charset=utf-8"
                ngx.say(kk.json.encode(kk.code({},rs.body)));
            else
                ngx.exit(rs.status);
            end
        }
    }

    include /etc/nginx/alias.d/*.conf;

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    
    location ~ /\.ht {
        deny  all;
    }

    location ~ /\.lua {
        deny  all;
    }

}
